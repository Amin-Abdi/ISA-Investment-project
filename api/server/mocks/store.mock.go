// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/Amin-Abdi/ISA-Investment-project/internal/postgres"
	"sync"
)

// StoreMock is a mock implementation of server.Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked server.Store
//		mockedStore := &StoreMock{
//			AddFundToISAFunc: func(ctx context.Context, isaID string, fundID string) (*postgres.ISA, error) {
//				panic("mock out the AddFundToISA method")
//			},
//			CreateFundFunc: func(ctx context.Context, fund postgres.Fund) (string, error) {
//				panic("mock out the CreateFund method")
//			},
//			CreateInvestmentFunc: func(ctx context.Context, investment postgres.Investment) (string, error) {
//				panic("mock out the CreateInvestment method")
//			},
//			CreateIsaFunc: func(ctx context.Context, isa postgres.ISA) (string, error) {
//				panic("mock out the CreateIsa method")
//			},
//			GetFundFunc: func(ctx context.Context, id string) (*postgres.Fund, error) {
//				panic("mock out the GetFund method")
//			},
//			GetInvestmentFunc: func(ctx context.Context, investmentID string) (*postgres.Investment, error) {
//				panic("mock out the GetInvestment method")
//			},
//			GetIsaFunc: func(ctx context.Context, id string) (*postgres.ISA, error) {
//				panic("mock out the GetIsa method")
//			},
//			ListFundsFunc: func(ctx context.Context) ([]postgres.Fund, error) {
//				panic("mock out the ListFunds method")
//			},
//			ListInvestmentsFunc: func(ctx context.Context, isaID string) ([]postgres.Investment, error) {
//				panic("mock out the ListInvestments method")
//			},
//			UpdateFundFunc: func(ctx context.Context, id string, name string, description string) (*postgres.Fund, error) {
//				panic("mock out the UpdateFund method")
//			},
//			UpdateFundTotalAmountFunc: func(ctx context.Context, fundID string, totalAmount float64) (*postgres.Fund, error) {
//				panic("mock out the UpdateFundTotalAmount method")
//			},
//			UpdateIsaFunc: func(ctx context.Context, isaID string, cashBalance float64, investmentAmount float64) (*postgres.ISA, error) {
//				panic("mock out the UpdateIsa method")
//			},
//		}
//
//		// use mockedStore in code that requires server.Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// AddFundToISAFunc mocks the AddFundToISA method.
	AddFundToISAFunc func(ctx context.Context, isaID string, fundID string) (*postgres.ISA, error)

	// CreateFundFunc mocks the CreateFund method.
	CreateFundFunc func(ctx context.Context, fund postgres.Fund) (string, error)

	// CreateInvestmentFunc mocks the CreateInvestment method.
	CreateInvestmentFunc func(ctx context.Context, investment postgres.Investment) (string, error)

	// CreateIsaFunc mocks the CreateIsa method.
	CreateIsaFunc func(ctx context.Context, isa postgres.ISA) (string, error)

	// GetFundFunc mocks the GetFund method.
	GetFundFunc func(ctx context.Context, id string) (*postgres.Fund, error)

	// GetInvestmentFunc mocks the GetInvestment method.
	GetInvestmentFunc func(ctx context.Context, investmentID string) (*postgres.Investment, error)

	// GetIsaFunc mocks the GetIsa method.
	GetIsaFunc func(ctx context.Context, id string) (*postgres.ISA, error)

	// ListFundsFunc mocks the ListFunds method.
	ListFundsFunc func(ctx context.Context) ([]postgres.Fund, error)

	// ListInvestmentsFunc mocks the ListInvestments method.
	ListInvestmentsFunc func(ctx context.Context, isaID string) ([]postgres.Investment, error)

	// UpdateFundFunc mocks the UpdateFund method.
	UpdateFundFunc func(ctx context.Context, id string, name string, description string) (*postgres.Fund, error)

	// UpdateFundTotalAmountFunc mocks the UpdateFundTotalAmount method.
	UpdateFundTotalAmountFunc func(ctx context.Context, fundID string, totalAmount float64) (*postgres.Fund, error)

	// UpdateIsaFunc mocks the UpdateIsa method.
	UpdateIsaFunc func(ctx context.Context, isaID string, cashBalance float64, investmentAmount float64) (*postgres.ISA, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddFundToISA holds details about calls to the AddFundToISA method.
		AddFundToISA []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IsaID is the isaID argument value.
			IsaID string
			// FundID is the fundID argument value.
			FundID string
		}
		// CreateFund holds details about calls to the CreateFund method.
		CreateFund []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Fund is the fund argument value.
			Fund postgres.Fund
		}
		// CreateInvestment holds details about calls to the CreateInvestment method.
		CreateInvestment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Investment is the investment argument value.
			Investment postgres.Investment
		}
		// CreateIsa holds details about calls to the CreateIsa method.
		CreateIsa []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Isa is the isa argument value.
			Isa postgres.ISA
		}
		// GetFund holds details about calls to the GetFund method.
		GetFund []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetInvestment holds details about calls to the GetInvestment method.
		GetInvestment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InvestmentID is the investmentID argument value.
			InvestmentID string
		}
		// GetIsa holds details about calls to the GetIsa method.
		GetIsa []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ListFunds holds details about calls to the ListFunds method.
		ListFunds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListInvestments holds details about calls to the ListInvestments method.
		ListInvestments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IsaID is the isaID argument value.
			IsaID string
		}
		// UpdateFund holds details about calls to the UpdateFund method.
		UpdateFund []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Name is the name argument value.
			Name string
			// Description is the description argument value.
			Description string
		}
		// UpdateFundTotalAmount holds details about calls to the UpdateFundTotalAmount method.
		UpdateFundTotalAmount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FundID is the fundID argument value.
			FundID string
			// TotalAmount is the totalAmount argument value.
			TotalAmount float64
		}
		// UpdateIsa holds details about calls to the UpdateIsa method.
		UpdateIsa []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IsaID is the isaID argument value.
			IsaID string
			// CashBalance is the cashBalance argument value.
			CashBalance float64
			// InvestmentAmount is the investmentAmount argument value.
			InvestmentAmount float64
		}
	}
	lockAddFundToISA          sync.RWMutex
	lockCreateFund            sync.RWMutex
	lockCreateInvestment      sync.RWMutex
	lockCreateIsa             sync.RWMutex
	lockGetFund               sync.RWMutex
	lockGetInvestment         sync.RWMutex
	lockGetIsa                sync.RWMutex
	lockListFunds             sync.RWMutex
	lockListInvestments       sync.RWMutex
	lockUpdateFund            sync.RWMutex
	lockUpdateFundTotalAmount sync.RWMutex
	lockUpdateIsa             sync.RWMutex
}

// AddFundToISA calls AddFundToISAFunc.
func (mock *StoreMock) AddFundToISA(ctx context.Context, isaID string, fundID string) (*postgres.ISA, error) {
	if mock.AddFundToISAFunc == nil {
		panic("StoreMock.AddFundToISAFunc: method is nil but Store.AddFundToISA was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		IsaID  string
		FundID string
	}{
		Ctx:    ctx,
		IsaID:  isaID,
		FundID: fundID,
	}
	mock.lockAddFundToISA.Lock()
	mock.calls.AddFundToISA = append(mock.calls.AddFundToISA, callInfo)
	mock.lockAddFundToISA.Unlock()
	return mock.AddFundToISAFunc(ctx, isaID, fundID)
}

// AddFundToISACalls gets all the calls that were made to AddFundToISA.
// Check the length with:
//
//	len(mockedStore.AddFundToISACalls())
func (mock *StoreMock) AddFundToISACalls() []struct {
	Ctx    context.Context
	IsaID  string
	FundID string
} {
	var calls []struct {
		Ctx    context.Context
		IsaID  string
		FundID string
	}
	mock.lockAddFundToISA.RLock()
	calls = mock.calls.AddFundToISA
	mock.lockAddFundToISA.RUnlock()
	return calls
}

// CreateFund calls CreateFundFunc.
func (mock *StoreMock) CreateFund(ctx context.Context, fund postgres.Fund) (string, error) {
	if mock.CreateFundFunc == nil {
		panic("StoreMock.CreateFundFunc: method is nil but Store.CreateFund was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Fund postgres.Fund
	}{
		Ctx:  ctx,
		Fund: fund,
	}
	mock.lockCreateFund.Lock()
	mock.calls.CreateFund = append(mock.calls.CreateFund, callInfo)
	mock.lockCreateFund.Unlock()
	return mock.CreateFundFunc(ctx, fund)
}

// CreateFundCalls gets all the calls that were made to CreateFund.
// Check the length with:
//
//	len(mockedStore.CreateFundCalls())
func (mock *StoreMock) CreateFundCalls() []struct {
	Ctx  context.Context
	Fund postgres.Fund
} {
	var calls []struct {
		Ctx  context.Context
		Fund postgres.Fund
	}
	mock.lockCreateFund.RLock()
	calls = mock.calls.CreateFund
	mock.lockCreateFund.RUnlock()
	return calls
}

// CreateInvestment calls CreateInvestmentFunc.
func (mock *StoreMock) CreateInvestment(ctx context.Context, investment postgres.Investment) (string, error) {
	if mock.CreateInvestmentFunc == nil {
		panic("StoreMock.CreateInvestmentFunc: method is nil but Store.CreateInvestment was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Investment postgres.Investment
	}{
		Ctx:        ctx,
		Investment: investment,
	}
	mock.lockCreateInvestment.Lock()
	mock.calls.CreateInvestment = append(mock.calls.CreateInvestment, callInfo)
	mock.lockCreateInvestment.Unlock()
	return mock.CreateInvestmentFunc(ctx, investment)
}

// CreateInvestmentCalls gets all the calls that were made to CreateInvestment.
// Check the length with:
//
//	len(mockedStore.CreateInvestmentCalls())
func (mock *StoreMock) CreateInvestmentCalls() []struct {
	Ctx        context.Context
	Investment postgres.Investment
} {
	var calls []struct {
		Ctx        context.Context
		Investment postgres.Investment
	}
	mock.lockCreateInvestment.RLock()
	calls = mock.calls.CreateInvestment
	mock.lockCreateInvestment.RUnlock()
	return calls
}

// CreateIsa calls CreateIsaFunc.
func (mock *StoreMock) CreateIsa(ctx context.Context, isa postgres.ISA) (string, error) {
	if mock.CreateIsaFunc == nil {
		panic("StoreMock.CreateIsaFunc: method is nil but Store.CreateIsa was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Isa postgres.ISA
	}{
		Ctx: ctx,
		Isa: isa,
	}
	mock.lockCreateIsa.Lock()
	mock.calls.CreateIsa = append(mock.calls.CreateIsa, callInfo)
	mock.lockCreateIsa.Unlock()
	return mock.CreateIsaFunc(ctx, isa)
}

// CreateIsaCalls gets all the calls that were made to CreateIsa.
// Check the length with:
//
//	len(mockedStore.CreateIsaCalls())
func (mock *StoreMock) CreateIsaCalls() []struct {
	Ctx context.Context
	Isa postgres.ISA
} {
	var calls []struct {
		Ctx context.Context
		Isa postgres.ISA
	}
	mock.lockCreateIsa.RLock()
	calls = mock.calls.CreateIsa
	mock.lockCreateIsa.RUnlock()
	return calls
}

// GetFund calls GetFundFunc.
func (mock *StoreMock) GetFund(ctx context.Context, id string) (*postgres.Fund, error) {
	if mock.GetFundFunc == nil {
		panic("StoreMock.GetFundFunc: method is nil but Store.GetFund was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetFund.Lock()
	mock.calls.GetFund = append(mock.calls.GetFund, callInfo)
	mock.lockGetFund.Unlock()
	return mock.GetFundFunc(ctx, id)
}

// GetFundCalls gets all the calls that were made to GetFund.
// Check the length with:
//
//	len(mockedStore.GetFundCalls())
func (mock *StoreMock) GetFundCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetFund.RLock()
	calls = mock.calls.GetFund
	mock.lockGetFund.RUnlock()
	return calls
}

// GetInvestment calls GetInvestmentFunc.
func (mock *StoreMock) GetInvestment(ctx context.Context, investmentID string) (*postgres.Investment, error) {
	if mock.GetInvestmentFunc == nil {
		panic("StoreMock.GetInvestmentFunc: method is nil but Store.GetInvestment was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		InvestmentID string
	}{
		Ctx:          ctx,
		InvestmentID: investmentID,
	}
	mock.lockGetInvestment.Lock()
	mock.calls.GetInvestment = append(mock.calls.GetInvestment, callInfo)
	mock.lockGetInvestment.Unlock()
	return mock.GetInvestmentFunc(ctx, investmentID)
}

// GetInvestmentCalls gets all the calls that were made to GetInvestment.
// Check the length with:
//
//	len(mockedStore.GetInvestmentCalls())
func (mock *StoreMock) GetInvestmentCalls() []struct {
	Ctx          context.Context
	InvestmentID string
} {
	var calls []struct {
		Ctx          context.Context
		InvestmentID string
	}
	mock.lockGetInvestment.RLock()
	calls = mock.calls.GetInvestment
	mock.lockGetInvestment.RUnlock()
	return calls
}

// GetIsa calls GetIsaFunc.
func (mock *StoreMock) GetIsa(ctx context.Context, id string) (*postgres.ISA, error) {
	if mock.GetIsaFunc == nil {
		panic("StoreMock.GetIsaFunc: method is nil but Store.GetIsa was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetIsa.Lock()
	mock.calls.GetIsa = append(mock.calls.GetIsa, callInfo)
	mock.lockGetIsa.Unlock()
	return mock.GetIsaFunc(ctx, id)
}

// GetIsaCalls gets all the calls that were made to GetIsa.
// Check the length with:
//
//	len(mockedStore.GetIsaCalls())
func (mock *StoreMock) GetIsaCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetIsa.RLock()
	calls = mock.calls.GetIsa
	mock.lockGetIsa.RUnlock()
	return calls
}

// ListFunds calls ListFundsFunc.
func (mock *StoreMock) ListFunds(ctx context.Context) ([]postgres.Fund, error) {
	if mock.ListFundsFunc == nil {
		panic("StoreMock.ListFundsFunc: method is nil but Store.ListFunds was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListFunds.Lock()
	mock.calls.ListFunds = append(mock.calls.ListFunds, callInfo)
	mock.lockListFunds.Unlock()
	return mock.ListFundsFunc(ctx)
}

// ListFundsCalls gets all the calls that were made to ListFunds.
// Check the length with:
//
//	len(mockedStore.ListFundsCalls())
func (mock *StoreMock) ListFundsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListFunds.RLock()
	calls = mock.calls.ListFunds
	mock.lockListFunds.RUnlock()
	return calls
}

// ListInvestments calls ListInvestmentsFunc.
func (mock *StoreMock) ListInvestments(ctx context.Context, isaID string) ([]postgres.Investment, error) {
	if mock.ListInvestmentsFunc == nil {
		panic("StoreMock.ListInvestmentsFunc: method is nil but Store.ListInvestments was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		IsaID string
	}{
		Ctx:   ctx,
		IsaID: isaID,
	}
	mock.lockListInvestments.Lock()
	mock.calls.ListInvestments = append(mock.calls.ListInvestments, callInfo)
	mock.lockListInvestments.Unlock()
	return mock.ListInvestmentsFunc(ctx, isaID)
}

// ListInvestmentsCalls gets all the calls that were made to ListInvestments.
// Check the length with:
//
//	len(mockedStore.ListInvestmentsCalls())
func (mock *StoreMock) ListInvestmentsCalls() []struct {
	Ctx   context.Context
	IsaID string
} {
	var calls []struct {
		Ctx   context.Context
		IsaID string
	}
	mock.lockListInvestments.RLock()
	calls = mock.calls.ListInvestments
	mock.lockListInvestments.RUnlock()
	return calls
}

// UpdateFund calls UpdateFundFunc.
func (mock *StoreMock) UpdateFund(ctx context.Context, id string, name string, description string) (*postgres.Fund, error) {
	if mock.UpdateFundFunc == nil {
		panic("StoreMock.UpdateFundFunc: method is nil but Store.UpdateFund was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          string
		Name        string
		Description string
	}{
		Ctx:         ctx,
		ID:          id,
		Name:        name,
		Description: description,
	}
	mock.lockUpdateFund.Lock()
	mock.calls.UpdateFund = append(mock.calls.UpdateFund, callInfo)
	mock.lockUpdateFund.Unlock()
	return mock.UpdateFundFunc(ctx, id, name, description)
}

// UpdateFundCalls gets all the calls that were made to UpdateFund.
// Check the length with:
//
//	len(mockedStore.UpdateFundCalls())
func (mock *StoreMock) UpdateFundCalls() []struct {
	Ctx         context.Context
	ID          string
	Name        string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		ID          string
		Name        string
		Description string
	}
	mock.lockUpdateFund.RLock()
	calls = mock.calls.UpdateFund
	mock.lockUpdateFund.RUnlock()
	return calls
}

// UpdateFundTotalAmount calls UpdateFundTotalAmountFunc.
func (mock *StoreMock) UpdateFundTotalAmount(ctx context.Context, fundID string, totalAmount float64) (*postgres.Fund, error) {
	if mock.UpdateFundTotalAmountFunc == nil {
		panic("StoreMock.UpdateFundTotalAmountFunc: method is nil but Store.UpdateFundTotalAmount was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		FundID      string
		TotalAmount float64
	}{
		Ctx:         ctx,
		FundID:      fundID,
		TotalAmount: totalAmount,
	}
	mock.lockUpdateFundTotalAmount.Lock()
	mock.calls.UpdateFundTotalAmount = append(mock.calls.UpdateFundTotalAmount, callInfo)
	mock.lockUpdateFundTotalAmount.Unlock()
	return mock.UpdateFundTotalAmountFunc(ctx, fundID, totalAmount)
}

// UpdateFundTotalAmountCalls gets all the calls that were made to UpdateFundTotalAmount.
// Check the length with:
//
//	len(mockedStore.UpdateFundTotalAmountCalls())
func (mock *StoreMock) UpdateFundTotalAmountCalls() []struct {
	Ctx         context.Context
	FundID      string
	TotalAmount float64
} {
	var calls []struct {
		Ctx         context.Context
		FundID      string
		TotalAmount float64
	}
	mock.lockUpdateFundTotalAmount.RLock()
	calls = mock.calls.UpdateFundTotalAmount
	mock.lockUpdateFundTotalAmount.RUnlock()
	return calls
}

// UpdateIsa calls UpdateIsaFunc.
func (mock *StoreMock) UpdateIsa(ctx context.Context, isaID string, cashBalance float64, investmentAmount float64) (*postgres.ISA, error) {
	if mock.UpdateIsaFunc == nil {
		panic("StoreMock.UpdateIsaFunc: method is nil but Store.UpdateIsa was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		IsaID            string
		CashBalance      float64
		InvestmentAmount float64
	}{
		Ctx:              ctx,
		IsaID:            isaID,
		CashBalance:      cashBalance,
		InvestmentAmount: investmentAmount,
	}
	mock.lockUpdateIsa.Lock()
	mock.calls.UpdateIsa = append(mock.calls.UpdateIsa, callInfo)
	mock.lockUpdateIsa.Unlock()
	return mock.UpdateIsaFunc(ctx, isaID, cashBalance, investmentAmount)
}

// UpdateIsaCalls gets all the calls that were made to UpdateIsa.
// Check the length with:
//
//	len(mockedStore.UpdateIsaCalls())
func (mock *StoreMock) UpdateIsaCalls() []struct {
	Ctx              context.Context
	IsaID            string
	CashBalance      float64
	InvestmentAmount float64
} {
	var calls []struct {
		Ctx              context.Context
		IsaID            string
		CashBalance      float64
		InvestmentAmount float64
	}
	mock.lockUpdateIsa.RLock()
	calls = mock.calls.UpdateIsa
	mock.lockUpdateIsa.RUnlock()
	return calls
}
